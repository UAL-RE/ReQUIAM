#!/usr/bin/env python

from os import path

from datetime import date

import argparse

# For LDAP query
from requiam.ldap_query import LDAPConnection

# Org Code related
from requiam.org_code_numbers import get_numbers

# Logging
from redata.commons import logger
from requiam import TimerClass
from requiam.commons import dict_load

# Version and branch info
from requiam import __version__
from redata.commons.git_info import GitInfo
from requiam import __file__ as library_path

today = date.today()

library_root_path = path.dirname(path.dirname(library_path))  # Retrieve parent directory to requiam


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Command-line driver for Organization Code summary information.')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--persistent_path', required=True, help='full parent path for logs')
    parser.add_argument('--ldap_host', help='LDAP host')
    parser.add_argument('--ldap_base_dn', help='base DN for LDAP bind and query')
    parser.add_argument('--ldap_user', help='user name for LDAP login')
    parser.add_argument('--ldap_password', help='password for LDAP login')
    parser.add_argument('--org_url', help='URL that exports CSV file with organizational code ')
    parser.add_argument('--debug', action='store_true', help='turn on debug logging')
    args = parser.parse_args()
    vargs = vars(args)

    gi = GitInfo(input_path=library_root_path)

    banner_message = f"""
    This is the command-line tool that queries EDS to retrieve UAL patron
    membership based on organization codes.

    ReQUIAM active branch: {gi.branch}
    ReQUIAM version: {__version__}
    ReQUIAM commit hash: {gi.short_commit}
    Created by Chun Ly
    Issues? Submit a GitHub ticket: https://github.com/UAL-ODIS/ReQUIAM/issues/new
    """
    print(banner_message)

    main_timer = TimerClass()
    main_timer._start()

    config_dict = dict_load(args.config, vargs=vargs)
    global_dict = config_dict['global']  # These are settings in args.config
    extras_dict = config_dict['extras']  # These are settings specific to script not in args.config

    # Define logfile
    log_dir = path.join(global_dict['persistent_path'], global_dict['log_dir'])
    logfile_prefix = 'org_code_numbers'
    log = logger.log_setup(log_dir, logfile_prefix)

    lc = logger.LogCommons(log, 'get_org_code_numbers', gi,
                           code_name='ReQUIAM', version=__version__)
    lc.script_start()

    # Retrieve username, hostname, IP
    lc.script_sys_info()

    protected_keys = ['ldap_user', 'ldap_password', 'org_url']
    cred_err = logger.log_settings(vargs, config_dict, protected_keys,
                                   log=log)

    if cred_err:
        log.warning("Not all credentials available!")
        log.warning("Exiting")
        raise ValueError

    ldap_keys = [key for key in global_dict.keys() if 'ldap_' in key]
    ldap_dict = {x: global_dict[x] for x in ldap_keys}
    ldc = LDAPConnection(**ldap_dict, log=log)

    get_numbers(ldc, config_dict['google']['org_url'], log)

    main_timer._stop()
    log.info(main_timer.format)

    lc.script_end()

    lc.log_permission()
