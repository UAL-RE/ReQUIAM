#!/usr/bin/env python

from os import path

from datetime import date

import argparse

from requiam import ldap_query
from requiam.commons import dict_load, figshare_stem
from redata.commons import logger
from requiam import TimerClass
from requiam.manual_override import ManualOverride, get_current_groups
from requiam.grouper import Grouper, create_active_group, grouper_delta_user

# Version and branch info
from requiam import __version__
from requiam.git_info import GitInfo
from requiam import __file__ as library_path

today = date.today()

library_root_path = path.dirname(path.dirname(library_path))  # Retrieve parent directory to requiam


if __name__ == '__main__':
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for simple user EDS updates.')
    parser.add_argument('--netid', required=True,
                        help='''NetIDs for user. Comma separated for multiple users.
                                Alternatively path to .txt file that contains users (single entry per line).''')
    parser.add_argument('--config', required=True, help='path to configuration file')
    parser.add_argument('--persistent_path', required=True, help='full parent path for logs')
    parser.add_argument('--ldap_host', help='LDAP host')
    parser.add_argument('--ldap_base_dn', help='base DN for LDAP bind and query')
    parser.add_argument('--ldap_user', help='user name for LDAP login')
    parser.add_argument('--ldap_password', help='password for LDAP login')
    parser.add_argument('--grouper_host', help='Grouper host')
    parser.add_argument('--grouper_base_path', help='base path for Grouper API')
    parser.add_argument('--grouper_user', help='user name for Grouper login')
    parser.add_argument('--grouper_password', help='password for Grouper login')
    parser.add_argument('--grouper_figtest', action='store_true', help='Flag to use testing stem')
    parser.add_argument('--batch_size', help='synchronization batch size')
    parser.add_argument('--batch_timeout', help='synchronization batch timeout in seconds')
    parser.add_argument('--batch_delay', help='delay between batches in seconds')
    parser.add_argument('--portal', help='Specifies portal change')
    parser.add_argument('--quota', help='Specifies quota change')
    parser.add_argument('--portal_file', help='filename for manual-override portal file')
    parser.add_argument('--quota_file', help='filename for manual-override quota file')
    parser.add_argument('--portal_file_noupdate', action='store_true',
                        help='Boolean to flag not updating  manual-override portal file')
    parser.add_argument('--quota_file_noupdate', action='store_true',
                        help='Boolean to flag not updating manual-override quota file')
    parser.add_argument('--sync', action='store_true', help='perform synchronization')
    parser.add_argument('--sync_max', help='maximum membership delta to allow when synchronizing')
    parser.add_argument('--active_remove', action='store_true',
                        help='Remove membership in figshare:active group')
    parser.add_argument('--root_add', action='store_true', help='Include root in portal CSV')
    parser.add_argument('--debug', action='store_true', help='turn on debug logging')
    args = parser.parse_args()
    vargs = vars(args)

    gi = GitInfo(input_path=library_root_path)

    banner_message = f"""
    This is the command-line tool that enable manual updates to Grouper membership.

    ReQUIAM active branch: {gi.branch}
    ReQUIAM version: {__version__}
    ReQUIAM commit hash: {gi.short_commit}
    Created by Chun Ly
    Issues? Submit a GitHub ticket: https://github.com/UAL-ODIS/ReQUIAM/issues/new
    """
    print(banner_message)

    main_timer = TimerClass()
    main_timer._start()

    config_dict = dict_load(args.config, vargs=vargs)
    global_dict = config_dict['global']  # These are settings in args.config
    extras_dict = config_dict['extras']  # These are settings specific to script not in args.config

    # Define logfile
    log_dir = path.join(global_dict['persistent_path'], global_dict['log_dir'])
    logfile_prefix = 'user_update'
    log = logger.log_setup(log_dir, logfile_prefix)

    lc = logger.LogCommons(log, 'user_update', gi)

    lc.script_start()

    # Retrieve username, hostname, IP
    lc.script_sys_info()

    protected_keys = ['ldap_user', 'ldap_password',
                      'grouper_user', 'grouper_password']
    cred_err = logger.log_settings(vargs, config_dict, protected_keys,
                                   log=log)

    if cred_err:
        log.warning("Not all credentials available!")
        log.warning("Exiting")
        raise ValueError

    ldap_keys = [key for key in global_dict.keys() if 'ldap_' in key]
    ldap_dict = {x: global_dict[x] for x in ldap_keys}

    grouper_keys = ['grouper_'+suffix for
                    suffix in ['host', 'base_path', 'user', 'password']]
    grouper_dict = {x: global_dict[x] for x in grouper_keys}

    delta_keys = ['batch_size', 'batch_timeout', 'batch_delay', 'sync_max']
    delta_dict = {x: global_dict[x] for x in delta_keys}

    # Manual override class
    mo = ManualOverride(global_dict['portal_file'], global_dict['quota_file'],
                        log=log, root_add=extras_dict['root_add'])

    # Initiate LDAP connection
    ldc = ldap_query.LDAPConnection(**ldap_dict, log=log)

    if '.txt' in extras_dict['netid'][-4:]:
        # Read in text file with list of users
        log.info(f"Reading : {extras_dict['netid']}")
        with open(extras_dict['netid']) as f:
            netid_list = f.read().splitlines()
        f.close()
        log.info(f"List of input users: {netid_list}")
    else:
        # Separate comma-separated list of users
        netid_list = extras_dict['netid'].split(',')

    netid_set = sorted(set(netid_list), key=netid_list.index)
    num_netid = len(netid_set)

    # Get uaid based on NetID (uid)
    clean_uaid_list  = []
    clean_netid_list = []
    for netid in netid_set:
        uid_query = ldap_query.uid_query(netid)
        user_uaid = ldap_query.ldap_search(ldc, uid_query)
        if len(user_uaid) == 0:
            log.warning(f"netid not found! {netid}")
        else:
            log.info(f" uaid for {netid} : {list(user_uaid)[0]}")
            clean_uaid_list.append(list(user_uaid)[0])
            clean_netid_list.append(netid)

    if len(clean_uaid_list) == 0:
        log.warning(f"No netid's to work with")
        raise ValueError

    # Grouper API tool
    grouper_production = True if not extras_dict['grouper_figtest'] else False
    ga = Grouper(**grouper_dict, log=log,
                 grouper_production=grouper_production)

    # Check to see if portal exists on Grouper before proceeding
    portal_check = True
    if extras_dict['portal'] != '(unset)' and extras_dict['portal'] != 'root':
        portal_check = ga.check_group_exists(extras_dict['portal'], 'portal')

        if not portal_check:
            log.warning("portal not found on Grouper!")

    # Check to see if quota exists on Grouper before proceeding
    quota_check = True
    if extras_dict['quota'] != '(unset)' and extras_dict['quota'] != 'root':
        quota_check = ga.check_group_exists(extras_dict['quota'], 'quota')

        if not quota_check:
            log.warning("quota not found on Grouper!")

    # Raise error if either Grouper checks fails
    if not portal_check or not quota_check:
        raise SystemError

    # Initialized nested dictionary
    current_dict = dict()
    current_dict['active'] = {'uaid': [], 'netid': []}
    current_dict['not_active'] = {'uaid': [], 'netid': []}

    current_dict['summary'] = {'active': 0}
    if extras_dict['portal'] != '(unset)':
        current_dict['summary']['portal'] = 0

        current_dict['portal'] = {'uaid': [], 'netid': []}
        current_dict['not_portal'] = {'uaid': [], 'netid': []}
    if extras_dict['quota'] != '(unset)':
        current_dict['summary']['quota'] = 0

        current_dict['quota'] = {'uaid': [], 'netid': []}
        current_dict['not_quota'] = {'uaid': [], 'netid': []}

    # Retrieve ismemberof figshare information
    # Populate current_dict
    for netid, uaid in zip(clean_netid_list, clean_uaid_list):
        current_dict[netid] = get_current_groups(netid, ldap_dict,
                                                 production=grouper_production,
                                                 log=log, verbose=False)
        if current_dict[netid]['active']:
            current_dict['summary']['active'] += 1
            current_dict['active']['uaid'] += [uaid]
            current_dict['active']['netid'] += [netid]
        else:
            current_dict['not_active']['uaid'] += [uaid]
            current_dict['not_active']['netid'] += [netid]

        if extras_dict['portal'] != '(unset)':
            if current_dict[netid]['portal'] == extras_dict['portal']:
                current_dict['summary']['portal'] += 1

                current_dict['portal']['uaid'] += [uaid]
                current_dict['portal']['netid'] += [netid]
            else:
                current_dict['not_portal']['uaid'] += [uaid]
                current_dict['not_portal']['netid'] += [netid]

        if extras_dict['quota'] != '(unset)':
            if current_dict[netid]['quota'] == extras_dict['quota']:
                current_dict['summary']['quota'] += 1

                current_dict['quota']['uaid'] += [uaid]
                current_dict['quota']['netid'] += [netid]
            else:
                current_dict['not_quota']['uaid'] += [uaid]
                current_dict['not_quota']['netid'] += [netid]

    # Provide general information about active status
    if len(current_dict['active']['netid']) == 0:
        log.info("None of the supplied users are active")
    if len(current_dict['not_active']['netid']) == 0:
        log.info("All users are active")

    if len(current_dict['active']['netid']) > 0:
        log.info(f"List of users that are active : {current_dict['active']['netid']}")
    if len(current_dict['not_active']['netid']) > 0:
        log.info(f"List of users that are NOT active : {current_dict['not_active']['netid']}")

    main_stem = figshare_stem('', production=grouper_production)
    log.info(f"Main stem: {main_stem}")

    log.info("STAGE: ACTIVE")
    # figshare:active or figtest:active update
    if not extras_dict['active_remove']:
        if len(current_dict['not_active']['netid']) > 0:
            log.info("Creating figtest:group_active group")

            if not extras_dict['sync']:
                log.info("dry run, not creating active_group group")
            else:
                log.info("PROMPT: Provide the name for group...")
                group_name = input("PROMPT: ")
                log.info(f"RESPONSE: {group_name}")

                log.info("PROMPT: Provide the description for group...")
                group_description = input("PROMPT: ")
                log.info(f"RESPONSE: {group_description}")

                create_active_group(group_name, grouper_dict,
                                    group_description=group_description,
                                    log=log, add=extras_dict['sync'])

                d = grouper_delta_user(group_name, 'group_active',
                                       clean_netid_list, clean_uaid_list,
                                       'add', grouper_dict, delta_dict,
                                       sync=extras_dict['sync'], log=log,
                                       production=grouper_production)

                log.warning("!!! Group will still need to be added indirectly to active group !!!")
        else:
            log.info(f"All users are member of {main_stem}:active. No need to add")
    else:
        if len(current_dict['active']['netid']) > 0:
            log.info(f"Removing from {main_stem}:active group")

            d = grouper_delta_user('active', '',
                                   current_dict['active']['netid'],
                                   set(current_dict['active']['uaid']),
                                   'remove', grouper_dict, delta_dict,
                                   sync=extras_dict['sync'], log=log,
                                   production=grouper_production)
        else:
            log.info(f"All users not a member of {main_stem}:active. No need to remove")

    # Portal update
    if extras_dict['portal'] != '(unset)':
        log.info("STAGE: PORTAL")
        if len(current_dict['not_portal']['netid']) == 0:
            log.warning(f"All users are member of {main_stem}:portal:{extras_dict['portal']}. No need to add")
        else:
            # First remove from current portal group
            not_portal_netid = current_dict['not_portal']['netid']
            not_portal_uaid = current_dict['not_portal']['uaid']

            for i in range(len(not_portal_netid)):  # Loop over each case
                current_portal = current_dict[not_portal_netid[i]]['portal']
                if current_portal == 'root':
                    log.info(f"{not_portal_netid[i]} not assigned to a portal. Skipping removal")
                else:
                    log.info(f"Removing {not_portal_netid[i]} from current portal: {current_portal}")

                    d = grouper_delta_user(current_portal, 'portal',
                                           not_portal_netid[i], not_portal_uaid[i],
                                           'remove', grouper_dict, delta_dict,
                                           sync=extras_dict['sync'], log=log,
                                           production=grouper_production)

            # Add to new portal group
            if extras_dict['portal'] != 'root':
                log.info(f"Adding to {main_stem}:portal:{extras_dict['portal']}")

                in_mo = None if extras_dict['portal_file_noupdate'] else mo
                if isinstance(in_mo, type(None)):
                    log.warning("--portal_file_noupdate: Not updating portal file")

                d = grouper_delta_user(extras_dict['portal'], 'portal',
                                       current_dict['not_portal']['netid'],
                                       current_dict['not_portal']['uaid'],
                                       'add', grouper_dict, delta_dict, mo=in_mo,
                                       sync=extras_dict['sync'], log=log,
                                       production=grouper_production)
            else:
                # Remove entry from manual CSV file for 'root' case
                if extras_dict['sync']:
                    # Update of df only needed since there's not root portal to add too
                    if grouper_production:
                        if not extras_dict['portal_file_noupdate']:
                            mo.update_dataframe(current_dict['not_portal']['netid'],
                                                current_dict['not_portal']['uaid'],
                                                extras_dict['portal'], 'portal')
                        else:
                            log.warning("--portal_file_noupdate: Not updating portal file")
                    else:
                        log.info("Working with figtest stem. Not updating")
                else:
                    log.info('dry run, not updating portal dataframe')

    # Quota update
    if extras_dict['quota'] != '(unset)':
        log.info("STAGE: QUOTA")
        if len(current_dict['not_quota']['netid']) == 0:
            log.warning(f"All users are member of {main_stem}:quota:{extras_dict['quota']}. No need to add")
        else:
            # First remove from current quota group
            not_quota_netid = current_dict['not_quota']['netid']
            not_quota_uaid = current_dict['not_quota']['uaid']

            for i in range(len(not_quota_netid)):
                current_quota = current_dict[not_quota_netid[i]]['quota']
                if current_quota == 'root':
                    log.info(f"{not_quota_netid[i]} not assigned to a quota. Skipping removal")
                else:
                    log.info(f"Removing {not_quota_netid[i]} from current quota: {current_quota}")

                    d = grouper_delta_user(current_quota, 'quota',
                                           not_quota_netid[i], not_quota_uaid[i],
                                           'remove', grouper_dict, delta_dict,
                                           sync=extras_dict['sync'], log=log,
                                           production=grouper_production)

            # Add to new quota group
            if extras_dict['quota'] != 'root':
                log.info(f"Adding to {main_stem}:quota:{extras_dict['quota']}")

                in_mo = None if extras_dict['quota_file_noupdate'] else mo
                if isinstance(in_mo, type(None)):
                    log.warning("--quota_file_noupdate: Not updating quota file")

                d = grouper_delta_user(extras_dict['quota'], 'quota',
                                       current_dict['not_quota']['netid'],
                                       current_dict['not_quota']['uaid'],
                                       'add', grouper_dict, delta_dict,
                                       mo=in_mo, sync=extras_dict['sync'], log=log,
                                       production=grouper_production)
            else:
                # Remove entry from manual CSV file for 'root' case
                if extras_dict['sync']:
                    # Update of df only needed since there's not root portal to add too
                    if grouper_production:
                        if not extras_dict['quota_file_noupdate']:
                            mo.update_dataframe(current_dict['not_quota']['netid'],
                                                current_dict['not_quota']['uaid'],
                                                extras_dict['quota'], 'quota')
                        else:
                            log.warning("--quota_file_noupdate: Not updating quota file")
                    else:
                        log.info("Working with figtest stem. Not updating")
                else:
                    log.info('dry run, not updating portal dataframe')

    main_timer._stop()
    log.info(main_timer.format)

    lc.script_end()

    lc.log_permission()
